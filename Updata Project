{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Fruit Recognition .ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "mount_file_id": "1kydGnKqMPCKMTyJ3jpcAP3VctWuV4qfy",
      "authorship_tag": "ABX9TyNEaDPHJonjpNvJYgvTYRvA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Pxtri2156/Project-machine-learning/blob/master/Updata%20Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g2xzWx6s_XGC",
        "colab_type": "text"
      },
      "source": [
        "# **Import Package**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dcwFRBZCmoda",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "35548ae1-ea51-46f1-e028-4cd891b61cc5"
      },
      "source": [
        "# Importing modules \n",
        "from skimage import feature\n",
        "import imutils\n",
        "import numpy as np \n",
        "import pandas as pd \n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import cv2\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "from keras.utils import to_categorical\n",
        "from keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout\n",
        "from keras.models import Sequential\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "import mahotas\n",
        "import datetime\n",
        "import tarfile\n",
        "import urllib.request\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "#-----------------------------------\n",
        "import pickle\n",
        "import mahotas\n",
        "import h5py\n",
        "\n",
        "import glob\n",
        "import cv2\n",
        "import warnings\n",
        "from matplotlib import pyplot\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.model_selection import KFold, StratifiedKFold\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.externals import joblib\n",
        "np.random.seed(1)\n",
        "\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pCI-l9hiJ_rE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        },
        "outputId": "39d8e197-4606-45ef-e8c6-bc05326968c3"
      },
      "source": [
        "!pip install mahotas"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting mahotas\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ed/1f/01d805bc3588da8343373c279702d0fca4dc55f631873d9f2e159f9287ac/mahotas-1.4.10-cp36-cp36m-manylinux2010_x86_64.whl (5.7MB)\n",
            "\u001b[K     |████████████████████████████████| 5.7MB 2.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from mahotas) (1.18.5)\n",
            "Installing collected packages: mahotas\n",
            "Successfully installed mahotas-1.4.10\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DWOUDRmR-wT_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1jVvpu1ymn5r",
        "colab_type": "text"
      },
      "source": [
        "# **Xử lí data**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8r6FlKxAGIs6",
        "colab_type": "text"
      },
      "source": [
        "## **Đổi tên file** "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gL0KY9BlCwTM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Đổi tên file \n",
        "def Rename_File(path):\n",
        "  \n",
        "  for folder_name in os.listdir(path):\n",
        "    print('Folder {f} processing ..........'.format(f=folder_name))\n",
        "    path_1 = path + '/' + folder_name \n",
        "    i = 0\n",
        "    for file_name in os.listdir(path_1):\n",
        "      index = ''\n",
        "      if i // 1000 != 0:\n",
        "        index = str(i) \n",
        "      elif i // 100 != 0:\n",
        "        index = '0'+str(i) \n",
        "      elif i // 10 != 0 :\n",
        "        index = '00'+str(i)\n",
        "      else:\n",
        "        index = '000' + str(i)\n",
        "      t1 = path_1 + '/' + file_name\n",
        "      t2 = path_1 + '/' + folder_name + index + '.jpg'\n",
        "      #print('t2',t2)\n",
        "      i += 1\n",
        "      os.rename(t1,t2)\n",
        "    print(\"Rename folder {f} successfull\".format(f = folder_name))\n",
        "  print(\"Done\")\n",
        "  # This code can remove file (I don't know reason)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W0PoNgb-B1TN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "outputId": "2ae58444-d577-427a-e6c1-10f6b67e8719"
      },
      "source": [
        "Rename_File('/content/drive/My Drive/Project_ML/Dataset/Train_data')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Folder Apple processing ..........\n",
            "Rename folder Apple successfull\n",
            "Folder Avocado processing ..........\n",
            "Rename folder Avocado successfull\n",
            "Folder Custard processing ..........\n",
            "Rename folder Custard successfull\n",
            "Folder Banana processing ..........\n",
            "Rename folder Banana successfull\n",
            "Folder Plum processing ..........\n",
            "Rename folder Plum successfull\n",
            "Folder Start_Fruit processing ..........\n",
            "Rename folder Start_Fruit successfull\n",
            "Folder Dragon_Fruit processing ..........\n",
            "Rename folder Dragon_Fruit successfull\n",
            "Folder Orange processing ..........\n",
            "Rename folder Orange successfull\n",
            "Folder Watermelon processing ..........\n",
            "Rename folder Watermelon successfull\n",
            "Folder Mango processing ..........\n",
            "Rename folder Mango successfull\n",
            "Folder Guava processing ..........\n",
            "Rename folder Guava successfull\n",
            "Folder Coconut processing ..........\n",
            "Rename folder Coconut successfull\n",
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l5FQwf169-qa",
        "colab_type": "text"
      },
      "source": [
        "## **Số lượng file trong các folder**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qeBqQUnt_zXg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# count the number of files in a directory  \n",
        "def Number_Of_file(path):\n",
        "  Total = 0\n",
        "  for folder_name in os.listdir(path):\n",
        "\n",
        "    path_1 = path + '/' + folder_name \n",
        "    count  = 0\n",
        "    for file_name in os.listdir(path_1):\n",
        "      count += 1\n",
        "    Total += count\n",
        "    print(\"The number of file in folder {f} : {c}\".format(f = folder_name,c = count))\n",
        "  print(\"The total file: \",Total)\n",
        "  "
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "khexNzQX7tPL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "f787ad02-e44d-4ebb-f604-99729d3e7954"
      },
      "source": [
        "# The number of file in train_data\n",
        "path = '/content/drive/My Drive/Project_ML/Dataset/Train_data'\n",
        "Number_Of_file(path)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The number of file in folder Apple : 998\n",
            "The number of file in folder Avocado : 1282\n",
            "The number of file in folder Custard : 834\n",
            "The number of file in folder Banana : 1160\n",
            "The number of file in folder Plum : 1344\n",
            "The number of file in folder Start_Fruit : 941\n",
            "The number of file in folder Dragon_Fruit : 478\n",
            "The number of file in folder Orange : 1228\n",
            "The number of file in folder Watermelon : 810\n",
            "The number of file in folder Mango : 764\n",
            "The number of file in folder Guava : 805\n",
            "The number of file in folder Coconut : 1055\n",
            "The total file:  11699\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gBP7Rjt27xWY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "a758c325-0d3b-4494-f5cb-0e673ac581c0"
      },
      "source": [
        "# The number of file in test_data\n",
        "path = '/content/drive/My Drive/Project_ML/Dataset/Test_data'\n",
        "Number_Of_file(path)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The number of file in folder Apple : 457\n",
            "The number of file in folder Avocado : 416\n",
            "The number of file in folder Custard : 307\n",
            "The number of file in folder Banana : 348\n",
            "The number of file in folder Dragon_Fruit : 189\n",
            "The number of file in folder Start_Fruit : 434\n",
            "The number of file in folder Guava : 294\n",
            "The number of file in folder Mango : 402\n",
            "The number of file in folder Orange : 460\n",
            "The number of file in folder Coconut : 330\n",
            "The number of file in folder Plum : 337\n",
            "The number of file in folder Watermelon : 347\n",
            "The total file:  4321\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YzLNV6SMGRJJ",
        "colab_type": "text"
      },
      "source": [
        "## **Crop_Region_Interest**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IjxK_8wCouCG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def Crop_Region_Interest(path):\n",
        "  img = cv2.imread(path,cv2.IMREAD_COLOR)\n",
        "\n",
        "  cv2_imshow(img)\n",
        "\n",
        "  #0 noise reduction\n",
        "  img = np.copy(img) # we don't modify the original image\n",
        "  img[:,:,0] = cv2.GaussianBlur(img[:,:,0], ksize=(7,7), sigmaX=4, sigmaY=4)\n",
        "  img[:,:,1] = cv2.GaussianBlur(img[:,:,1], ksize=(7,7), sigmaX=4, sigmaY=4)\n",
        "  img[:,:,2] = cv2.GaussianBlur(img[:,:,2], ksize=(7,7), sigmaX=4, sigmaY=4)\n",
        "\n",
        "  #1.The input fruit image is converted to HSV colour space\n",
        "  img_HSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n",
        "  img_HSV = img_HSV[:,:,1:2]\n",
        "  #cv2_imshow(img_HSV)\n",
        "\n",
        "  #2.Perform thresholding operation on the S component, since S is much less sensitive to lighting variation.\n",
        "  ret, binary_img = cv2.threshold(img_HSV,128,255,cv2.THRESH_BINARY | cv2.THRESH_OTSU )\n",
        "  \n",
        "  #3. Close small holes using the Closing morphological operator with a disk structuring element.\n",
        "  #cv2_imshow(binary_img)\n",
        "  kernel = np.ones((5,5),np.uint8)\n",
        "  #binary_img = cv2.dilate(binary_img,kernel,iterations = 2)\n",
        "  opening_img = cv2.morphologyEx(binary_img, cv2.MORPH_OPEN, kernel)\n",
        "  closing_img = cv2.morphologyEx(opening_img, cv2.MORPH_CLOSE, kernel)\n",
        "\n",
        "  #4. Find the area of the Region of Interest from the binary image.\n",
        "  contours, hierarchy = cv2.findContours(closing_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "  print(contours)\n",
        "  #cv2.drawContours(img, contours, -1, (0,255,0), 3)\n",
        "  \n",
        "  #5. Crop the Region of Interest and replace the binary values with the original pixel intensity.\n",
        "  print('\\n')\n",
        "  cnt = contours[0]\n",
        "  x,y,w,h = cv2.boundingRect(cnt)\n",
        "  print('X,Y,W,H',x,y,w,h)\n",
        "  #cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)\n",
        "  img_crop = img[y-50:(y+h+50),x-50:(x+w+50),:]\n",
        "  \n",
        "  cv2_imshow(closing_img)\n",
        "  #cv2_imshow(img)\n",
        "  cv2_imshow(img_crop)\n",
        "  \n",
        "  '''\n",
        "  choose = int(input(\"DO YOU WANT CROP PICTURE: 1-YES, 0-NO ?\"))\n",
        "  if choose == 0:\n",
        "    # rename\n",
        "  else:\n",
        "    # Crop picture\n",
        "    cv2.imwrite(path,img_crop) \n",
        "  #pass '''\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sxeSRS1fEMi8",
        "colab_type": "text"
      },
      "source": [
        "*Note: Hàm vẫn chưa hoàn thiện nên fail rất nhiều*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W-HrlsAapcBH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "path = '/content/drive/My Drive/Region_Test/Copy of IMG_5376.JPG'\n",
        "Crop_Region_Interest(path)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9uGtDVZY9FXc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "67062519-193e-48e3-eae6-e05aa4e84a37"
      },
      "source": [
        "img.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(854, 480, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vlv_tZMODzwD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test = cv2.imread('/content/drive/My Drive/Datasets/Apple/output1/Apple_fruit001.jpg')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nydmeI6hEmY8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "c53f2c49-3b59-4817-b4d7-0830045bd479"
      },
      "source": [
        "if test.shape != (480,854,3): \n",
        "  print(\"No\")\n",
        "else: \n",
        "  print(\"Yes\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Yes\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ihFh9-h4Eqk2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "008aa482-73d7-42c3-b2b9-e11b8beab93f"
      },
      "source": [
        "cv2_imshow(test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=854x480 at 0x7FC94FE1BE10>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3iVXNSiDq16K",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "1e9e3362-8a87-4835-9476-a050c050bf12"
      },
      "source": [
        "test_path = '/content/drive/My Drive/Datasets'\n",
        "for filename_0 in os.listdir(test_path):\n",
        "  print('filename 0 ',filename_0)\n",
        "  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "filename 0  Start_Fruit\n",
            "filename 0  Dragon_Fruit\n",
            "filename 0  Apple\n",
            "filename 0  Mango\n",
            "filename 0  Avocado\n",
            "filename 0  Peach\n",
            "filename 0  Custard\n",
            "filename 0  Orange\n",
            "filename 0  Coconut\n",
            "filename 0  Guava\n",
            "filename 0  Watermelon\n",
            "filename 0  Banana\n",
            "filename 0  Plum\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qim65Xjnr5Nv",
        "colab_type": "text"
      },
      "source": [
        "## **Load ảnh** : "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mS6sbEX0lY-1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_path = '/content/drive/My Drive/Datasets'\n",
        "\n",
        "\n",
        "for filename_0 in os.listdir(test_path):\n",
        "  #print('filename 0 ',filename_0)\n",
        "  temp_path_0 = ''\n",
        "  temp_path_0 = test_path + '/'+filename_0\n",
        "  #print('temp_path_0',temp_path_0)\n",
        "  for filename_1 in os.listdir(temp_path_0 ):\n",
        "    #print('temp_path_0',temp_path_0)\n",
        "    temp_path_1 = ''\n",
        "    temp_path_1 = temp_path_0 + '/'+filename_1\n",
        "    for filename_2 in os.listdir(temp_path_1 ):\n",
        "      temp_path_2 = ''\n",
        "      temp_path_2 = temp_path_1 + '/'+filename_2\n",
        "      img = cv2.imread(temp_path_2)\n",
        "      if  img.shape != (480,854,3):\n",
        "        print(\"Noise\", img.shape) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lbkui2W0CZ0O",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "87f7c366-b032-4976-add6-a43ca29e3d80"
      },
      "source": [
        "a = \"pham/xuan\"\n",
        "b = os.path.join(a,'tri')\n",
        "print(b)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "pham/xuan/tri\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wLkQDcYcYOu_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "ebd831ee-1b4b-44e1-9b36-8f2b8e9e67f5"
      },
      "source": [
        "print(y_train.shape)\n",
        "print(y_val.shape)\n",
        "print(x_train.shape)\n",
        "print(x_val.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(180, 4)\n",
            "(60, 4)\n",
            "(180, 200, 200, 3)\n",
            "(60, 200, 200, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vAS3MpV_ZPjD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "bff3a4d6-9f28-4f44-d369-61b11572d200"
      },
      "source": [
        "print(y_train[0])\n",
        "print(x_train[0][0][0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 0 0 0]\n",
            "[255 255 255]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2jRmtveznLY4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Processing testing data\n",
        "# -> appending images in a list 'test_images'\n",
        "# -> appending labels in a list 'test_labels'\n",
        "# The test data contains labels as well also we are appending it to a list but we are'nt going to use it while training.\n",
        "\n",
        "test_images = []\n",
        "test_labels = []\n",
        "shape = (200,200)\n",
        "test_path = '/content/drive/My Drive/My_Data/Fruit/Data_of_Fruit/test_zip/test'\n",
        "\n",
        "for filename in os.listdir(test_path):\n",
        "  #print(filename)\n",
        "  if filename.split('.')[1] == 'jpg':\n",
        "    img = cv2.imread(os.path.join(test_path,filename))\n",
        "    #print(img)    \n",
        "    # Spliting file names and storing the labels for image in list\n",
        "    test_labels.append(filename.split('_')[0])\n",
        "        \n",
        "    # Resize all images to a specific shape\n",
        "    img = cv2.resize(img,shape)\n",
        "    #print(img) \n",
        "    test_images.append(img)\n",
        "#print(test_images[0])\n",
        "        \n",
        "# Converting test_images to array\n",
        "test_images = np.array(test_images)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0F2gDhkSnTf8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "outputId": "e9816448-394d-4da4-b807-efc9200cc21a"
      },
      "source": [
        "# Visualizing Training data\n",
        "print(train_labels[0])\n",
        "plt.imshow(train_images[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 0 0 0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f6978c58f98>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y5EV-FThnW6m",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "outputId": "d572a0fc-806c-46d8-da64-bb61bdc9043c"
      },
      "source": [
        "# Visualizing Training data\n",
        "print(train_labels[100])\n",
        "plt.imshow(train_images[100])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 1 0 0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f69787366d8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q_-KxCFBF2SD",
        "colab_type": "text"
      },
      "source": [
        "# **Rút trích đặc trưng**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TtSEjAMFF6uU",
        "colab_type": "text"
      },
      "source": [
        "Trong đồ án này sử dụng các đặc trưng sau : Hu moments, Haralick Textures, Color Histogram: \n",
        "+ Hu moments:......có thể tham khảo thêm [tại đây](https://en.wikipedia.org/wiki/Image_moment)\n",
        "+ Haralick Textures: ..............có thể tham khảo thêm [tại đây](http://haralick.org/journals/TexturalFeatures.pdf)\n",
        "+ Color Histogram: ...............có thể tham khảo thêm[ tại đây](https://en.wikipedia.org/wiki/Color_histogram)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kNiooqHOIKVV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "path_test = '/content/drive/My Drive/My_Data/Fruit/Test_data/banana_02.jpg'\n",
        "img = cv2.imread(path_test)\n",
        "cv2_imshow(img)\n",
        "image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
        "feature = cv2.HuMoments(cv2.moments(image)).flatten()\n",
        "print('HuMoments feature:',feature)\n",
        "\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
        "# compute the haralick texture feature vector\n",
        "haralick = mahotas.features.haralick(gray).mean(axis=0)\n",
        "# return the result\n",
        "print(\"haralick feature\",haralick)\n",
        "\n",
        "# convert the image to HSV color-space\n",
        "image = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n",
        "# compute the color histogram\n",
        "hist  = cv2.calcHist([image], [0, 1, 2], None, [bins, bins, bins], [0, 256, 0, 256, 0, 256])\n",
        "# normalize the histogram\n",
        "cv2.normalize(hist, hist)\n",
        "# return the histogram\n",
        "#print(hist)\n",
        "color = ('b','g','r')\n",
        "for i,col in enumerate(color):\n",
        "    histr = cv2.calcHist([img],[i],None,[256],[0,256])\n",
        "    plt.plot(histr,color = col)\n",
        "    plt.xlim([0,256])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7df6_F-p3uvY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VeoKM-52PFMV",
        "colab_type": "text"
      },
      "source": [
        "### **Các hàm để cho rút trich đặc trưng kết hợp**\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vA1jgXdMHoWN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# feature-descriptor-1: Hu Moments\n",
        "def fd_hu_moments(image):\n",
        "    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
        "    feature = cv2.HuMoments(cv2.moments(image)).flatten()\n",
        "    return feature\n",
        "\n",
        "\n",
        "# feature-descriptor-2: Haralick Texture\n",
        "def fd_haralick(image):\n",
        "    # convert the image to grayscale\n",
        "    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
        "    # compute the haralick texture feature vector\n",
        "    haralick = mahotas.features.haralick(gray).mean(axis=0)\n",
        "    # return the result\n",
        "    return haralick\n",
        "\n",
        "\n",
        "# feature-descriptor-3: Color Histogram\n",
        "def fd_histogram(image, mask=None):\n",
        "    # convert the image to HSV color-space\n",
        "    image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n",
        "    # compute the color histogram\n",
        "    hist  = cv2.calcHist([image], [0, 1, 2], None, [bins, bins, bins], [0, 256, 0, 256, 0, 256])\n",
        "    # normalize the histogram\n",
        "    cv2.normalize(hist, hist)\n",
        "    # return the histogram\n",
        "    return hist.flatten()"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m6abjuGTwLqf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "ac9e7e25-c659-45dd-d307-a32cc5d04ef1"
      },
      "source": [
        "labels = ['tri','pHam','xuan','a']\n",
        "targetNames = np.unique(labels)\n",
        "le          = LabelEncoder()\n",
        "target      = le.fit_transform(labels)\n",
        "print(targetNames)\n",
        "print(target)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['a' 'pHam' 'tri' 'xuan']\n",
            "[2 1 3 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SyuIUdgVxA3Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "0b5a9bc9-0ead-4f11-c1b9-a57c50e7100f"
      },
      "source": [
        "global_features = [[1,2,3,4],\n",
        "                   [1,3,4,8],\n",
        "                   [1,2,5,3.2]]\n",
        "scaler            = MinMaxScaler(feature_range=(0, 1))\n",
        "rescaled_features = scaler.fit_transform(global_features)\n",
        "print(rescaled_features)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.         0.         0.         0.16666667]\n",
            " [0.         1.         0.5        1.        ]\n",
            " [0.         0.         1.         0.        ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-qTRb0GWK2yY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "bins             = 8\n",
        "fixed_size       = tuple((64, 64))"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YO4sfvUVecNS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def Extract_Feature(path,h5_data,h5_labels):\n",
        "  #path = '/content/drive/My Drive/Project_ML/Dataset/Train_data'\n",
        "  # empty lists to hold feature vectors and labels\n",
        "  global_features = []\n",
        "  labels          = []\n",
        "  # loop over the training data sub-folders\n",
        "  #for training_name in train_labels:\n",
        "  for fruit in os.listdir(path):\n",
        "      # join the training data path and each species training folder\n",
        "      dir = os.path.join(path, fruit)\n",
        "\n",
        "      # get the current training label\n",
        "      current_label = fruit\n",
        "\n",
        "      # loop over the images in each sub-folder\n",
        "      #for x in range(1,images_per_class+1):\n",
        "      for file_name in os.listdir(dir):\n",
        "          # get the image file name\n",
        "          path_file = os.path.join(dir,file_name)\n",
        "          # read the image and resize it to a fixed-size\n",
        "          image = cv2.imread(path_file)\n",
        "          image = cv2.resize(image, fixed_size)\n",
        "\n",
        "          ####################################\n",
        "          # Global Feature extraction\n",
        "          ####################################\n",
        "          fv_hu_moments = fd_hu_moments(image)\n",
        "          fv_haralick   = fd_haralick(image)\n",
        "          fv_histogram  = fd_histogram(image)\n",
        "\n",
        "          ###################################\n",
        "          # Concatenate global features\n",
        "          ###################################\n",
        "          global_feature = np.hstack([fv_histogram, fv_haralick, fv_hu_moments])\n",
        "\n",
        "          # update the list of labels and feature vectors\n",
        "          labels.append(current_label)\n",
        "          global_features.append(global_feature)\n",
        "\n",
        "      print(\"[STATUS] Processed folder: {}\".format(current_label))\n",
        "\n",
        "  print(\"[STATUS] Completed Global Feature Extraction...\")\n",
        "\n",
        "  # get the overall feature vector size\n",
        "  print(\"[STATUS] Feature vector size {}\".format(np.array(global_features).shape))\n",
        "\n",
        "  # get the overall training label size\n",
        "  print(\"[STATUS] training Labels {}\".format(np.array(labels).shape))\n",
        "\n",
        "  # encode the target labels\n",
        "  targetNames = np.unique(labels)\n",
        "  le          = LabelEncoder()\n",
        "  target      = le.fit_transform(labels)\n",
        "  print(\"[STATUS] training labels encoded...\")\n",
        "\n",
        "  # scale features in the range (0-1)\n",
        "  scaler            = MinMaxScaler(feature_range=(0, 1))\n",
        "  rescaled_features = scaler.fit_transform(global_features) # Decrease the calculation\n",
        "  print(\"[STATUS] feature vector normalized...\")\n",
        "\n",
        "  print(\"[STATUS] target labels: {}\".format(target))\n",
        "  print(\"[STATUS] target labels shape: {}\".format(target.shape))\n",
        "\n",
        "  # save the feature vector using HDF5\n",
        "  h5f_data = h5py.File(h5_data, 'w')\n",
        "  h5f_data.create_dataset('dataset', data=np.array(rescaled_features))\n",
        "\n",
        "  h5f_label = h5py.File(h5_labels, 'w')\n",
        "  h5f_label.create_dataset('dataset', data=np.array(target))\n",
        "\n",
        "  h5f_data.close()\n",
        "  h5f_label.close()\n",
        "\n",
        "  print(\"[STATUS] DONE :v\")"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QdcyF1EGPQe1",
        "colab_type": "text"
      },
      "source": [
        "#### **Rút trích đặc trưng tập huấn luyện**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rrTTid2o21Zj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "outputId": "ffccf044-e873-4c3d-b51c-0b093cb5da72"
      },
      "source": [
        "path = '/content/drive/My Drive/Project_ML/Dataset/Train_data'\n",
        "h5_train_data = '/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_data.h5'\n",
        "h5_train_labels = '/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_labels.h5'\n",
        "Extract_Feature(path,h5_train_data,h5_train_labels)"
      ],
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[STATUS] Processed folder: Apple\n",
            "[STATUS] Processed folder: Avocado\n",
            "[STATUS] Processed folder: Custard\n",
            "[STATUS] Processed folder: Banana\n",
            "[STATUS] Processed folder: Plum\n",
            "[STATUS] Processed folder: Start_Fruit\n",
            "[STATUS] Processed folder: Dragon_Fruit\n",
            "[STATUS] Processed folder: Orange\n",
            "[STATUS] Processed folder: Watermelon\n",
            "[STATUS] Processed folder: Mango\n",
            "[STATUS] Processed folder: Guava\n",
            "[STATUS] Processed folder: Coconut\n",
            "[STATUS] Completed Global Feature Extraction...\n",
            "[STATUS] Feature vector size (11699, 532)\n",
            "[STATUS] training Labels (11699,)\n",
            "[STATUS] training labels encoded...\n",
            "[STATUS] feature vector normalized...\n",
            "[STATUS] target labels: [0 0 0 ... 3 3 3]\n",
            "[STATUS] target labels shape: (11699,)\n",
            "[STATUS] DONE :v\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F3C6KSL4PX_Q",
        "colab_type": "text"
      },
      "source": [
        "#### **Rút trích đặc trưng cho tập *kiểm* tra**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O_xx9BKV3GtG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "outputId": "f7503599-8627-42f0-fd17-071ae7c67cd4"
      },
      "source": [
        "path = '/content/drive/My Drive/Project_ML/Dataset/Test_data'\n",
        "h5_test_data = '/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_data.h5'\n",
        "h5_test_labels = '/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_labels.h5'\n",
        "Extract_Feature(path,h5_test_data,h5_test_labels)"
      ],
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[STATUS] Processed folder: Apple\n",
            "[STATUS] Processed folder: Avocado\n",
            "[STATUS] Processed folder: Custard\n",
            "[STATUS] Processed folder: Banana\n",
            "[STATUS] Processed folder: Dragon_Fruit\n",
            "[STATUS] Processed folder: Start_Fruit\n",
            "[STATUS] Processed folder: Guava\n",
            "[STATUS] Processed folder: Mango\n",
            "[STATUS] Processed folder: Orange\n",
            "[STATUS] Processed folder: Coconut\n",
            "[STATUS] Processed folder: Plum\n",
            "[STATUS] Processed folder: Watermelon\n",
            "[STATUS] Completed Global Feature Extraction...\n",
            "[STATUS] Feature vector size (4321, 532)\n",
            "[STATUS] training Labels (4321,)\n",
            "[STATUS] training labels encoded...\n",
            "[STATUS] feature vector normalized...\n",
            "[STATUS] target labels: [ 0  0  0 ... 11 11 11]\n",
            "[STATUS] target labels shape: (4321,)\n",
            "[STATUS] DONE :v\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "065XSdZ4UC-C",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print('global fealtures',global_feature)\n",
        "print('labels',labels)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F5MIbfiC2Xjx",
        "colab_type": "text"
      },
      "source": [
        "## **Rút trích đặc trưng với HOG**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I4gZ6H1M2ca5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import glob\n",
        "import imutils\n",
        "from skimage import feature"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6t2lzFjAY1eD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def F_HOG(path):\n",
        "  print('START EXACTURE')\n",
        "  data = []\n",
        "  labels = []\n",
        "  for folder in os.listdir(path):\n",
        "    fruit_path = os.path.join(path,folder)\n",
        "    print('[STATUS] folder {f} extracting.....'.format(f= folder))\n",
        "    for file_name in os.listdir(fruit_path):\n",
        "      #print('file name {f} '.format(f = file_name))\n",
        "      path_temp = os.path.join(fruit_path, file_name)\n",
        "      img = cv2.imread(path_temp)\n",
        "      img = cv2.resize(img,(64,64))\n",
        "      gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
        "          \n",
        "      H = feature.hog(gray, orientations=9, pixels_per_cell=(10, 10),\n",
        "                cells_per_block=(2, 2), transform_sqrt=True, block_norm=\"L1\")\n",
        "      # update the data and labels\n",
        "      data.append(H)\n",
        "      labels.append(folder)\n",
        "    print('[STATUS] Done folder {f} '.format(f = folder))\n",
        "  data = np.array(data)\n",
        "  targetNames = np.unique(labels)\n",
        "  le          = LabelEncoder()\n",
        "  target      = le.fit_transform(labels)\n",
        "  print('Done')\n",
        "  return data, target\n",
        " "
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TuIMFdl_SEmx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "outputId": "9f5a0377-b366-4828-8392-6ecc73a9ece3"
      },
      "source": [
        "path_train = '/content/drive/My Drive/Project_ML/Dataset/Train_data'\n",
        "x_train_HOG, label_train_HOG = F_HOG(path_train)\n",
        "pickle.dump([x_train_HOG, label_train_HOG], open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_HOG_.h5', 'wb' ))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "START EXACTURE\n",
            "[STATUS] folder Apple extracting.....\n",
            "[STATUS] Done folder Apple \n",
            "[STATUS] folder Avocado extracting.....\n",
            "[STATUS] Done folder Avocado \n",
            "[STATUS] folder Custard extracting.....\n",
            "[STATUS] Done folder Custard \n",
            "[STATUS] folder Banana extracting.....\n",
            "[STATUS] Done folder Banana \n",
            "[STATUS] folder Plum extracting.....\n",
            "[STATUS] Done folder Plum \n",
            "[STATUS] folder Start_Fruit extracting.....\n",
            "[STATUS] Done folder Start_Fruit \n",
            "[STATUS] folder Dragon_Fruit extracting.....\n",
            "[STATUS] Done folder Dragon_Fruit \n",
            "[STATUS] folder Orange extracting.....\n",
            "[STATUS] Done folder Orange \n",
            "[STATUS] folder Watermelon extracting.....\n",
            "[STATUS] Done folder Watermelon \n",
            "[STATUS] folder Mango extracting.....\n",
            "[STATUS] Done folder Mango \n",
            "[STATUS] folder Guava extracting.....\n",
            "[STATUS] Done folder Guava \n",
            "[STATUS] folder Coconut extracting.....\n",
            "[STATUS] Done folder Coconut \n",
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BZf9QRTXA1_u",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "outputId": "837e81a1-c41a-43a7-eedd-318ff29f9b71"
      },
      "source": [
        "path_test = '/content/drive/My Drive/Project_ML/Dataset/Test_data'\n",
        "x_test_HOG, label_test_HOG = F_HOG(path_test)\n",
        "pickle.dump([x_test_HOG, label_test_HOG], open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_HOG.h5', 'wb' ))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "START EXACTURE\n",
            "[STATUS] folder Apple extracting.....\n",
            "[STATUS] Done folder Apple \n",
            "[STATUS] folder Avocado extracting.....\n",
            "[STATUS] Done folder Avocado \n",
            "[STATUS] folder Custard extracting.....\n",
            "[STATUS] Done folder Custard \n",
            "[STATUS] folder Banana extracting.....\n",
            "[STATUS] Done folder Banana \n",
            "[STATUS] folder Dragon_Fruit extracting.....\n",
            "[STATUS] Done folder Dragon_Fruit \n",
            "[STATUS] folder Start_Fruit extracting.....\n",
            "[STATUS] Done folder Start_Fruit \n",
            "[STATUS] folder Guava extracting.....\n",
            "[STATUS] Done folder Guava \n",
            "[STATUS] folder Mango extracting.....\n",
            "[STATUS] Done folder Mango \n",
            "[STATUS] folder Orange extracting.....\n",
            "[STATUS] Done folder Orange \n",
            "[STATUS] folder Coconut extracting.....\n",
            "[STATUS] Done folder Coconut \n",
            "[STATUS] folder Plum extracting.....\n",
            "[STATUS] Done folder Plum \n",
            "[STATUS] folder Watermelon extracting.....\n",
            "[STATUS] Done folder Watermelon \n",
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uTbRysqA7nJ1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "85d2ad8a-89c7-42ed-c075-3e11adad893a"
      },
      "source": [
        "tri = [457,416, 307, 348, 189, 434, 294, 402, 460, 330, 337, 347]\n",
        "print(x_train_HOG.shape)\n",
        "i = 457-150 = 307"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(11699, 900)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bl_eot186TL0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_train_HOG, label_train_HOG = pickle.load(open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_HOG_.h5', 'rb' ))\n",
        "x_test_HOG, label_test_HOG = pickle.load(open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_HOG.h5', 'rb' ))\n"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N3fWBJR7R7zs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "2d5afd86-2a04-4182-f5f6-69027ac1a9ce"
      },
      "source": [
        "a = np.concatenate((x_train_HOG,x_test_HOG),axis = 0)\n",
        "b = np.concatenate((label_train_HOG,label_test_HOG),axis = 0)\n",
        "\n",
        "print(a.shape)\n",
        "print(b.shape)\n",
        "\n",
        "(train, test, trainLabels, testLabelsG) = train_test_split(np.array(a),np.array(b),test_size=test_size, random_state=seed)"
      ],
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(16020, 900)\n",
            "(16020,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o3oN_0TUxWQx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pickle.dump(train,open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_data.h5','wb'))\n",
        "pickle.dump(trainLabels,open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_labels.h5','wb'))\n",
        "pickle.dump(test,open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_data.h5','wb'))\n",
        "pickle.dump(testLabelsG,open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_labels.h5','wb'))"
      ],
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PW8QPMO3w8AC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "87fcdd5e-791f-40f4-b221-0cdc8019f6f7"
      },
      "source": [
        "print(train.shape)\n",
        "print(test.shape)\n",
        "print(trainLabels.shape)\n",
        "print(testLabelsG.shape)\n"
      ],
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(14418, 900)\n",
            "(1602, 900)\n",
            "(14418,)\n",
            "(1602,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y2OCYE9FjYn-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "fa5d1e47-49e7-49df-b959-d1a9da8bcc79"
      },
      "source": [
        "print(results[0])\n",
        "print(names)"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.80027739 0.78085992 0.78987517 0.76560333 0.78432732 0.80235784\n",
            " 0.78085992 0.78016644 0.78625954 0.76891048]\n",
            "['LR', 'LDA', 'KNN', 'CART', 'RF', 'NB', 'SVM']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FfdFC7Lv6A0o",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "bc797c5e-9f96-4234-8535-647809ff5f19"
      },
      "source": [
        "from skimage import feature\n",
        "import glob\n",
        "import imutils\n",
        "data = []\n",
        "img = cv2.imread('/content/drive/My Drive/Project_ML/Dataset/Test_data/Banana/Banana166.jpg')\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
        "edged = imutils.auto_canny(gray)\n",
        "\n",
        "# Tìm contours trong edge map, chỉ giữ lại contours lớn nhất, được giả định là chứa logo xe.\n",
        "cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL,\n",
        "                                cv2.CHAIN_APPROX_SIMPLE)\n",
        "cnts = imutils.grab_contours(cnts)\n",
        "c = max(cnts, key = cv2.contourArea)\n",
        "\n",
        "# Trích xuất vùng có trái cây và resize lại kích thước ảnh logo về 200x200\n",
        "(x, y, w, h) = cv2.boundingRect(c)\n",
        "fruit = gray[y:y+h, x:x+w]\n",
        "fruit = cv2.resize(fruit, (200, 200))\n",
        "\n",
        "# Khởi tạo HOG descriptor\n",
        "H = feature.hog(fruit, orientations=9, pixels_per_cell=(10, 10),\n",
        "  cells_per_block=(2, 2), transform_sqrt=True, block_norm=\"L1\")\n",
        "\n",
        "# update the data and labels\n",
        "data.append(H)\n",
        "print(data)\n",
        "print(type(data))\n",
        "print(type(np.array(data)))"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[array([0.02141075, 0.00849886, 0.00397418, ..., 0.07652596, 0.01401084,\n",
            "       0.01317072])]\n",
            "<class 'list'>\n",
            "<class 'numpy.ndarray'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GAZdAQBt5mMd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 151
        },
        "outputId": "502a0b5a-e273-40ce-d1ee-862aa5690cd4"
      },
      "source": [
        "a = [[[1]],[[2]],[[3]],[[4]]]\n",
        "b = np.array(a)\n",
        "print(b)\n",
        "print(a)"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[[1]]\n",
            "\n",
            " [[2]]\n",
            "\n",
            " [[3]]\n",
            "\n",
            " [[4]]]\n",
            "[[[1]], [[2]], [[3]], [[4]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v5ne59-VS5KR",
        "colab_type": "text"
      },
      "source": [
        "# **Xây dựng model**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XNf0n3YuW-Fi",
        "colab_type": "text"
      },
      "source": [
        "## **Khởi tạo các model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M-gP9HcrNRNv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "e390ca93-131a-4b20-d1e4-b6bf792367ec"
      },
      "source": [
        "# Test sử dụng model \n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import KFold, StratifiedKFold\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "\n",
        "num_trees = 100\n",
        "test_size = 0.10\n",
        "seed      = 9\n",
        "scoring    = \"accuracy\"\n",
        "\n",
        "x_train = [[1],[2],[3],[4],[9]]\n",
        "label_train = [0,1,0,0,1]\n",
        "y_test = [[5],[6]]\n",
        "label_test = [0,1]\n",
        "models = []\n",
        "models.append(('LR', LogisticRegression(random_state=seed)))\n",
        "models.append(('CART', DecisionTreeClassifier(random_state=seed)))\n",
        "models.append(('RF', RandomForestClassifier(n_estimators=num_trees, random_state=seed)))\n",
        "\n",
        "results = []\n",
        "names = []\n",
        "for name, model in models:\n",
        "    kfold = KFold(n_splits=2, random_state=seed)\n",
        "    cv_results = cross_val_score(model,x_train, label_train, cv=kfold, scoring=scoring)\n",
        "    results.append(cv_results)\n",
        "    names.append(name)\n",
        "    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n",
        "    print(msg)\n",
        "model_1 = LogisticRegression(random_state=seed).fit(x_train,label_train)\n",
        "model_2 = DecisionTreeClassifier(random_state=seed).fit(x_train,label_train)\n",
        "\n",
        "print(model_1.predict(y_test))\n",
        "print(model_2.predict(y_test))\n",
        "\n",
        "import pickle\n",
        "pickle.dump([model_1,model_2], open('/content/drive/My Drive/Project_ML/Models/Model_test.pkl', 'wb' ))\n",
        "\n",
        "a1,a2 = pickle.load(open('/content/drive/My Drive/Project_ML/Models/Model_test.pkl','rb'))\n",
        "print(a1.predict(y_test))\n",
        "print(a2.predict(y_test))\n",
        "# Tất cả các model có thể lưu một file \n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "LR: 0.583333 (0.083333)\n",
            "CART: 0.583333 (0.083333)\n",
            "RF: 0.583333 (0.083333)\n",
            "[1 1]\n",
            "[0 0]\n",
            "[1 1]\n",
            "[0 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DhRv2u0xDkIX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "e72c879d-4cdf-4b34-eddd-b93e7f4030eb"
      },
      "source": [
        "\n",
        "\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "#--------------------\n",
        "# tunable-parameters\n",
        "#--------------------\n",
        "num_trees = 100\n",
        "test_size = 0.10\n",
        "seed      = 9\n",
        "train_path = \"/content/drive/My Drive/Project_ML/Dataset/Train_data\"\n",
        "scoring    = \"accuracy\"\n",
        "\n",
        "# get the training labels\n",
        "train_labels = []\n",
        "for folder_name in os.listdir(train_path):\n",
        "  train_labels.append(folder_name)\n",
        "\n",
        "\n",
        "# create all the machine learning models\n",
        "models = []\n",
        "models.append(('LR', LogisticRegression(random_state=seed)))\n",
        "models.append(('LDA', LinearDiscriminantAnalysis()))\n",
        "models.append(('KNN', KNeighborsClassifier()))\n",
        "models.append(('CART', DecisionTreeClassifier(random_state=seed)))\n",
        "models.append(('RF', RandomForestClassifier(n_estimators=num_trees, random_state=seed)))\n",
        "models.append(('NB', GaussianNB()))\n",
        "models.append(('SVM', SVC(random_state=seed)))\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[STATUS] features shape: (11699, 532)\n",
            "[STATUS] labels shape: (11699,)\n",
            "[STATUS] training started...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6hHxTUleW5Mj",
        "colab_type": "text"
      },
      "source": [
        "## **Đánh giá các model với K-fold**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kLl__AEHoZ-T",
        "colab_type": "text"
      },
      "source": [
        "### **K-fold với 3 đặc trưng kết hợp  và split 0.9-0.1**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kqDhyXoxpNTl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "h5f_data  = h5py.File('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_data.h5', 'r')\n",
        "h5f_label = h5py.File(\"/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_labels.h5\", 'r')\n",
        "xx_train  = h5f_data['dataset']\n",
        "labels_train   = h5f_label['dataset']\n",
        "\n",
        "xx_train        = np.array(xx_train)\n",
        "labels_train   = np.array(labels_train)\n",
        "\n",
        "h5f_data.close()\n",
        "h5f_label.close()\n",
        "\n",
        "\n",
        "h5f_data  = h5py.File('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_data.h5', 'r')\n",
        "h5f_label = h5py.File(\"/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_labels.h5\", 'r')\n",
        "xx_test  = h5f_data['dataset']\n",
        "labels_test   = h5f_label['dataset']\n",
        "\n",
        "xx_test        = np.array(xx_test)\n",
        "labels_test   = np.array(labels_test)\n",
        "\n",
        "h5f_data.close()\n",
        "h5f_label.close()\n",
        "\n"
      ],
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5rwcy3evr9TR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "48c5ff61-8128-4592-b8cb-e5c3b2a0ca4f"
      },
      "source": [
        "print(xx_train.shape)\n",
        "print(labels_train.shape)\n",
        "print(xx_test.shape)\n",
        "print(labels_test.shape)"
      ],
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(11699, 532)\n",
            "(11699,)\n",
            "(4321, 532)\n",
            "(4321,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5gvTS428sKcR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "933ebef1-3345-4573-fb45-aaae912d93c9"
      },
      "source": [
        "a = np.concatenate((xx_train,xx_test),axis = 0)\n",
        "b = np.concatenate((labels_train,labels_test), axis = 0)\n",
        "print(a.shape)\n",
        "print(b.shape)"
      ],
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(16020, 532)\n",
            "(16020,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EVTknyXIs026",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "44f01494-c224-4565-89c5-252a5061d457"
      },
      "source": [
        "(xx_train, xx_test, labels_train, labels_test) = train_test_split(np.array(a),np.array(b),test_size=test_size, random_state=seed)\n",
        "print(xx_train.shape)\n",
        "print(labels_train.shape)\n",
        "print(xx_test.shape)\n",
        "print(labels_test.shape)"
      ],
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(14418, 532)\n",
            "(14418,)\n",
            "(1602, 532)\n",
            "(1602,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tknvy0mTtcAx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pickle.dump(xx_train,open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_data.h5','wb'))\n",
        "pickle.dump(labels_train,open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_labels.h5','wb'))\n",
        "pickle.dump(xx_test,open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_data.h5','wb'))\n",
        "pickle.dump(labels_test,open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_labels.h5','wb'))"
      ],
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H5fC6GzwvLHr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "9b109a7c-d8e3-4dce-9c61-1be428f91313"
      },
      "source": [
        "global_features = pickle.load(open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_data.h5','rb'))\n",
        "global_labels = pickle.load(open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_labels.h5','rb'))\n",
        "print(global_features.shape)\n",
        "print(global_labels.shape)"
      ],
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(14418, 532)\n",
            "(14418,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p7sg54wCW4Fy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "4857736a-0459-4488-ead5-946722f1a993"
      },
      "source": [
        "# 10-fold cross validation\n",
        "names =  []\n",
        "results = []\n",
        "for name, model in models:\n",
        "    kfold = KFold(n_splits=10, random_state=seed)\n",
        "    cv_results = cross_val_score(model,global_features, global_labels, cv=kfold, scoring=\"accuracy\" )\n",
        "    results.append(cv_results)\n",
        "    names.append(name)\n",
        "    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n",
        "    print(msg)\n",
        "with open('/content/drive/My Drive/Project_ML/Models/Scoring.txt','wb') as fp:\n",
        "  pickle.dump(results, fp)\n",
        "# boxplot algorithm comparison\n",
        "fig = pyplot.figure()\n",
        "fig.suptitle('Machine Learning algorithm comparison')\n",
        "ax = fig.add_subplot(111)\n",
        "pyplot.boxplot(results)\n",
        "ax.set_xticklabels(names)\n",
        "pyplot.show()"
      ],
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "LR: 0.963379 (0.004763)\n",
            "LDA: 0.936330 (0.003840)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "KNN: 0.984602 (0.003923)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "CART: 0.931058 (0.008928)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "RF: 0.992024 (0.002563)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "NB: 0.738592 (0.016996)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "SVM: 0.981135 (0.003654)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PfS-HdiSq7gR",
        "colab_type": "text"
      },
      "source": [
        "Kết luận: Model raindom forest tốt nhất "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8aX0UHOAfp_x",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "0092dbcf-796b-4c48-d8a2-54b0edb68715"
      },
      "source": [
        "# Visulization\n",
        "import pickle\n",
        "with open('/content/drive/My Drive/Project_ML/Models/Scoring.txt','rb') as fp:\n",
        "  result = pickle.load(fp)\n",
        "print(result)\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "y = [1,2,3,4,5,6,7,8,9,10]\n",
        "name = ['LogisticRegression','LinearDiscriminantAnalysis',' KNeighborsClassifier','DecisionTreeClassifier','RandomForestClassifier','GaussianNB','SVC']\n",
        "\n",
        "# Biểu diễn nhiều đồ thị trên một biểu đồ \n",
        "\n",
        "fig, ax = plt.subplots(nrows = 3, ncols = 3, figsize = (15,15))\n",
        "# LogisticRegression\n",
        "ax[0,0].plot(y, result[0],'Green')\n",
        "ax[0,0].set_title(name[0])\n",
        "ax[0,0].set_xlabel(\"k_cross\")\n",
        "ax[0,0].set_ylabel(\"accuracy\")\n",
        "\n",
        "# LinearDiscriminantAnalysis\n",
        "ax[0,1].plot(y, result[1],'Blue')\n",
        "ax[0,1].set_title(name[1])\n",
        "ax[0,1].set_xlabel(\"k_cross\")\n",
        "ax[0,1].set_ylabel(\"accuracy\")\n",
        "\n",
        "# KNeighborsClassifier\n",
        "ax[0,2].plot(y, result[2],'Red')\n",
        "ax[0,2].set_title(name[2])\n",
        "ax[0,2].set_xlabel(\"k_cross\")\n",
        "ax[0,2].set_ylabel(\"accuracy\")\n",
        "\n",
        "# DecisionTreeClassifier\n",
        "ax[1,0].plot(y, result[3],'yellow')\n",
        "ax[1,0].set_title(name[3])\n",
        "ax[1,0].set_xlabel(\"k_cross\")\n",
        "ax[1,0].set_ylabel(\"accuracy\")\n",
        "\n",
        "# RandomForestClassifier\n",
        "ax[1,1].plot(y, result[4],'pink')\n",
        "ax[1,1].set_title(name[4])\n",
        "ax[1,1].set_xlabel(\"k_cross\")\n",
        "ax[1,1].set_ylabel(\"accuracy\")\n",
        "\n",
        "# GaussianNB\n",
        "ax[1,2].plot(y, result[5],'Orange')\n",
        "ax[1,2].set_title(name[5])\n",
        "ax[1,2].set_xlabel(\"k_cross\")\n",
        "ax[1,2].set_ylabel(\"accuracy\")\n",
        "\n",
        "# SVC\n",
        "ax[2,0].plot(y, result[6],'Green')\n",
        "ax[2,0].set_title(name[6])\n",
        "ax[2,0].set_xlabel(\"k_cross\")\n",
        "ax[2,0].set_ylabel(\"accuracy\")\n",
        "plt.show()"
      ],
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[array([0.97087379, 0.97087379, 0.96740638, 0.9590846 , 0.96463245,\n",
            "       0.95769764, 0.9590846 , 0.95839112, 0.96391395, 0.96183206]), array([0.93828017, 0.94382802, 0.9368932 , 0.93411928, 0.93411928,\n",
            "       0.93411928, 0.9334258 , 0.92995839, 0.94101319, 0.93754337]), array([0.98821082, 0.98196949, 0.98474341, 0.98404993, 0.98474341,\n",
            "       0.98959778, 0.97919556, 0.99029126, 0.9777932 , 0.98542679]), array([0.95353675, 0.93203883, 0.91678225, 0.92787795, 0.93065187,\n",
            "       0.93411928, 0.92995839, 0.92857143, 0.9333796 , 0.92366412]), array([0.99514563, 0.99237171, 0.99237171, 0.98959778, 0.99445215,\n",
            "       0.99653259, 0.98959778, 0.99029126, 0.98820264, 0.99167245]), array([0.77184466, 0.740638  , 0.74133148, 0.73786408, 0.73023578,\n",
            "       0.71359223, 0.71428571, 0.73786408, 0.76058293, 0.73768217]), array([0.98543689, 0.98335645, 0.98474341, 0.97919556, 0.98127601,\n",
            "       0.98335645, 0.97642164, 0.97434119, 0.98473282, 0.97848716])]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x1080 with 9 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5_52PJjOmSP9",
        "colab_type": "text"
      },
      "source": [
        "### **K-fold với đặc trưng HOG split (0.9-0.1)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "43EPd6qgz_bU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_train_HOG, label_train_HOG = pickle.load(open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_HOG_.h5', 'rb' ))\n",
        "x_test_HOG, label_test_HOG = pickle.load(open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_HOG.h5', 'rb' ))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e-6nJye50Gi8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "a = np.concatenate((x_train_HOG,x_test_HOG),axis = 0)\n",
        "b = np.concatenate((label_train_HOG,label_test_HOG),axis = 0)\n",
        "\n",
        "print(a.shape)\n",
        "print(b.shape)\n",
        "\n",
        "(train, test, trainLabels, testLabelsG) = train_test_split(np.array(a),np.array(b),test_size=test_size, random_state=seed)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wAsPaoC_0lT3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pickle.dump(train,open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_data.h5','wb'))\n",
        "pickle.dump(trainLabels,open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_labels.h5','wb'))\n",
        "pickle.dump(test,open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_data.h5','wb'))\n",
        "pickle.dump(testLabelsG,open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_labels.h5','wb'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Gs4YZ_tTS3h",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "edb09137-fe85-4156-a2c9-06d143747169"
      },
      "source": [
        "# 10-fold cross validation\n",
        "models = []\n",
        "models.append(('LR', LogisticRegression(random_state=seed)))\n",
        "models.append(('LDA', LinearDiscriminantAnalysis()))\n",
        "models.append(('KNN', KNeighborsClassifier()))\n",
        "models.append(('CART', DecisionTreeClassifier(random_state=seed)))\n",
        "models.append(('RF', RandomForestClassifier(n_estimators=num_trees, random_state=seed)))\n",
        "models.append(('NB', GaussianNB()))\n",
        "models.append(('SVM', SVC(random_state=seed)))\n",
        "results = []\n",
        "names  = []\n",
        "for name, model in models:\n",
        "    kfold = KFold(n_splits=10, random_state=seed)\n",
        "    cv_results = cross_val_score(model, train, trainLabels, cv=kfold, scoring=\"accuracy\")\n",
        "    results.append(cv_results)\n",
        "    names.append(name)\n",
        "    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n",
        "    print(msg)\n",
        "\n",
        "# boxplot algorithm comparison\n",
        "fig = pyplot.figure()\n",
        "fig.suptitle('Machine Learning algorithm comparison')\n",
        "ax = fig.add_subplot(111)\n",
        "pyplot.boxplot(results)\n",
        "ax.set_xticklabels(names)\n",
        "pyplot.show()"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "LR: 0.783950 (0.011145)\n",
            "LDA: 0.815717 (0.009150)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "KNN: 0.853516 (0.005343)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "CART: 0.527258 (0.008302)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "RF: 0.842281 (0.008077)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "NB: 0.653212 (0.010138)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "SVM: 0.927174 (0.005771)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kkaVkwn_i7Mm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 894
        },
        "outputId": "e032af8b-0a6c-43f5-860f-23ff3ed4606b"
      },
      "source": [
        "# Biểu diễn nhiều đồ thị trên một biểu đồ \n",
        "y = [1,2,3,4,5,6,7,8,9,10]\n",
        "fig, ax = plt.subplots(nrows = 3, ncols = 3, figsize = (15,15))\n",
        "ax[0,0].plot(y, results[0],'Green')\n",
        "ax[0,0].set_title(names[0])\n",
        "ax[0,0].set_xlabel(\"k_cross\")\n",
        "ax[0,0].set_ylabel(\"accuracy\")\n",
        "\n",
        "# LinearDiscriminantAnalysis\n",
        "ax[0,1].plot(y, results[1],'Blue')\n",
        "ax[0,1].set_title(names[1])\n",
        "ax[0,1].set_xlabel(\"k_cross\")\n",
        "ax[0,1].set_ylabel(\"accuracy\")\n",
        "\n",
        "# KNeighborsClassifier\n",
        "ax[0,2].plot(y, results[2],'Red')\n",
        "ax[0,2].set_title(names[2])\n",
        "ax[0,2].set_xlabel(\"k_cross\")\n",
        "ax[0,2].set_ylabel(\"accuracy\")\n",
        "\n",
        "# DecisionTreeClassifier\n",
        "ax[1,0].plot(y, results[3],'yellow')\n",
        "ax[1,0].set_title(names[3])\n",
        "ax[1,0].set_xlabel(\"k_cross\")\n",
        "ax[1,0].set_ylabel(\"accuracy\")\n",
        "\n",
        "# RandomForestClassifier\n",
        "ax[1,1].plot(y, results[4],'pink')\n",
        "ax[1,1].set_title(names[4])\n",
        "ax[1,1].set_xlabel(\"k_cross\")\n",
        "ax[1,1].set_ylabel(\"accuracy\")\n",
        "\n",
        "# GaussianNB\n",
        "ax[1,2].plot(y, results[5],'Orange')\n",
        "ax[1,2].set_title(names[5])\n",
        "ax[1,2].set_xlabel(\"k_cross\")\n",
        "ax[1,2].set_ylabel(\"accuracy\")\n",
        "\n",
        "# SVC\n",
        "ax[2,0].plot(y, results[6],'Green')\n",
        "ax[2,0].set_title(names[6])\n",
        "ax[2,0].set_xlabel(\"k_cross\")\n",
        "ax[2,0].set_ylabel(\"accuracy\")\n",
        "plt.show()\n",
        "\n",
        "fig.savefig('/content/drive/My Drive/Project_ML/Models/Figure of Model/Split9-1_With_HOG.png')\n"
      ],
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x1080 with 9 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0_hqh6g4XR1u",
        "colab_type": "text"
      },
      "source": [
        "## **Tạo Model để train**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D7tjnw9mL_N3",
        "colab_type": "text"
      },
      "source": [
        "### **Model với 3 đặc trưng**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "19wRda65MGo8",
        "colab_type": "text"
      },
      "source": [
        "#### *Traing*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k2R5GOqIHowd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "with open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_data.h5','rb') as fp:\n",
        "  x_train = pickle.load(fp)\n",
        "fp.close()\n",
        "with open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Train_labels.h5','rb') as fp:\n",
        "  label_train = pickle.load(fp)\n",
        "fp.close()"
      ],
      "execution_count": 197,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1GNovdWlH5P7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "d3ea81a5-f45a-4463-856f-1851975e514e"
      },
      "source": [
        "a = {}\n",
        "a['tri'] = [1,2,3,4]\n",
        "a[2] = ['Tri']\n",
        "print(a)\n",
        "b = {}\n",
        "b[1] = [1,2,3,4]\n",
        "b[2] = ['Pham']\n",
        "\n",
        "pickle.dump([a,b],open('/content/drive/My Drive/Project_ML/Models/Model_test.pkl','wb'))\n",
        "c = pickle.load(open('/content/drive/My Drive/Project_ML/Models/Model_test.pkl','rb'))\n",
        "print(c[0]['tri'])\n",
        "print(c[1])"
      ],
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'tri': [1, 2, 3, 4], 2: ['Tri']}\n",
            "[1, 2, 3, 4]\n",
            "{1: [1, 2, 3, 4], 2: ['Pham']}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WL4ew4ixSjin",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403
        },
        "outputId": "03ba4323-4be6-436a-ef0b-ea02d0d5ceb5"
      },
      "source": [
        "# Model\n",
        "#----------------------------------------------Chưa chạy ------------------------------------------------#\n",
        "\n",
        "num_trees = 100\n",
        "test_size = 0.10\n",
        "seed      = 9\n",
        "\n",
        "model_2d = {}\n",
        "print('[STATUS] Logistic Regression traning.... ')\n",
        "model_2d['LR'] = LogisticRegression(random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done Logistic Regression ')\n",
        "\n",
        "print('[STATUS]  Linear Discriminant Analysis training .....')\n",
        "model_2d['LDA'] = LinearDiscriminantAnalysis().fit(x_train,label_train)\n",
        "print('[STATUS] Done  Linear Discriminant Analysis')\n",
        "\n",
        "print('[STATUS] KNN training .....')\n",
        "model_2d['KNN'] = KNeighborsClassifier().fit(x_train,label_train)\n",
        "print('[STATUS] Done KNN ')\n",
        "\n",
        "print('[STATUS] Decision Tree Classifier training .....')\n",
        "model_2d['CART'] = DecisionTreeClassifier(random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done Decision Tree Classifier')\n",
        "\n",
        "print('[STATUS] Random Forest Classifier traning .....')\n",
        "model_2d['RF'] = RandomForestClassifier(n_estimators=num_trees, random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done Random Forest Classifier ')\n",
        "\n",
        "print('[STATUS] GaussianNB training....')\n",
        "model_2d['NB'] = GaussianNB().fit(x_train,label_train)\n",
        "print('[STATUS] Done GaussianNB ')\n",
        "\n",
        "print('[STATUS] SVC traning ')\n",
        "model_2d['SVM'] = SVC(random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done SVC')\n",
        "print('[STATUS] DONE ALL MODEL')\n",
        "\n",
        "#---------------------------------------------Sáng chạy -------------------------------------------------#\n"
      ],
      "execution_count": 183,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[STATUS] Logistic Regression traning.... \n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[STATUS] Done Logistic Regression \n",
            "[STATUS]  Linear Discriminant Analysis training .....\n",
            "[STATUS] Done  Linear Discriminant Analysis\n",
            "[STATUS] KNN training .....\n",
            "[STATUS] Done KNN \n",
            "[STATUS] Decision Tree Classifier training .....\n",
            "[STATUS] Done Decision Tree Classifier\n",
            "[STATUS] Random Forest Classifier traning .....\n",
            "[STATUS] Done Random Forest Classifier \n",
            "[STATUS] GaussianNB training....\n",
            "[STATUS] Done GaussianNB \n",
            "[STATUS] SVC traning \n",
            "[STATUS] Done SVC\n",
            "[STATUS] DONE ALL MODEL\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZLy3fq5VJ-bZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Save model\n",
        "pickle.dump(model_2d, open('/content/drive/My Drive/Project_ML/Models/Model_3d.pkl','wb'))\n"
      ],
      "execution_count": 189,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b4oCGJfELxQD",
        "colab_type": "text"
      },
      "source": [
        "#### Load model predict"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dhhjyoTkKkOS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "outputId": "8835227b-0849-4e63-d70d-0d5c9a4becec"
      },
      "source": [
        "# Load model\n",
        "model_2d = pickle.load(open('/content/drive/My Drive/Project_ML/Models/Model_3d.pkl','rb'))\n",
        "\n",
        "# Load test data \n",
        "\n",
        "with open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_data.h5','rb') as fp:\n",
        "  x_test = pickle.load(fp)\n",
        "fp.close()\n",
        "with open('/content/drive/My Drive/Project_ML/Feature/Hu_moments_and_haralick_and_histogram/Test_labels.h5','rb') as fp:\n",
        "  label_test = pickle.load(fp)\n",
        "fp.close()\n",
        "\n",
        "score = [0,0,1,0,0,0,0]\n",
        "score[0] = model_2d['LR'].score(x_test,label_test)\n",
        "\n",
        "\n",
        "score[1] = model_2d['LDA'].score(x_test,label_test)\n",
        "\n",
        "score[2] = model_2d['KNN'].score(x_test,label_test)\n",
        "\n",
        "score[3] = model_2d['CART'].score(x_test,label_test)\n",
        "\n",
        "score[4] = model_2d['RF'].score(x_test,label_test)\n",
        "\n",
        "score[5] =model_2d['NB'].score(x_test,label_test)\n",
        "\n",
        "score[6] = model_2d['SVM'].score(x_test,label_test)\n",
        "\n",
        "for i in range(7):\n",
        "  print(score[i])"
      ],
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9650436953807741\n",
            "0.9332084893882646\n",
            "0.9875156054931336\n",
            "0.9288389513108615\n",
            "0.9943820224719101\n",
            "0.7465667915106118\n",
            "0.9818976279650437\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zLE5ZTW9xUpm",
        "colab_type": "text"
      },
      "source": [
        "## **Model vơi HOG**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YDTIxzjhNXu1",
        "colab_type": "text"
      },
      "source": [
        "#### **Traing**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WTc8b0ayxTwQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403
        },
        "outputId": "ba22746e-cd52-452c-aa1c-26488e1e5e48"
      },
      "source": [
        "# Model\n",
        "#----------------------------------------------Chưa chạy ------------------------------------------------#\n",
        "\n",
        "num_trees = 100\n",
        "test_size = 0.10\n",
        "seed      = 9\n",
        "\n",
        "# Load feature\n",
        "with open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_data.h5','rb') as fp:\n",
        "  x_train = pickle.load(fp)\n",
        "fp.close()\n",
        "with open('/content/drive/My Drive/Project_ML/Feature/HOG/Train_labels.h5','rb') as fp:\n",
        "  label_train = pickle.load(fp)\n",
        "fp.close()\n",
        "\n",
        "model_HOG = {}\n",
        "print('[STATUS] Logistic Regression traning.... ')\n",
        "model_HOG['LR'] = LogisticRegression(random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done Logistic Regression ')\n",
        "\n",
        "print('[STATUS]  Linear Discriminant Analysis training .....')\n",
        "model_HOG['LDA'] = LinearDiscriminantAnalysis().fit(x_train,label_train)\n",
        "print('[STATUS] Done  Linear Discriminant Analysis')\n",
        "\n",
        "print('[STATUS] KNN training .....')\n",
        "model_HOG['KNN'] = KNeighborsClassifier().fit(x_train,label_train)\n",
        "print('[STATUS] Done KNN ')\n",
        "\n",
        "print('[STATUS] Decision Tree Classifier training .....')\n",
        "model_HOG['CART'] = DecisionTreeClassifier(random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done Decision Tree Classifier')\n",
        "\n",
        "print('[STATUS] Random Forest Classifier traning .....')\n",
        "model_HOG['RF'] = RandomForestClassifier(n_estimators=num_trees, random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done Random Forest Classifier ')\n",
        "\n",
        "print('[STATUS] GaussianNB training....')\n",
        "model_HOG['NB'] = GaussianNB().fit(x_train,label_train)\n",
        "print('[STATUS] Done GaussianNB ')\n",
        "\n",
        "print('[STATUS] SVC traning ')\n",
        "model_HOG['SVM'] = SVC(random_state=seed).fit(x_train,label_train)\n",
        "print('[STATUS] Done SVC')\n",
        "print('[STATUS] DONE ALL MODEL')\n"
      ],
      "execution_count": 206,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[STATUS] Logistic Regression traning.... \n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[STATUS] Done Logistic Regression \n",
            "[STATUS]  Linear Discriminant Analysis training .....\n",
            "[STATUS] Done  Linear Discriminant Analysis\n",
            "[STATUS] KNN training .....\n",
            "[STATUS] Done KNN \n",
            "[STATUS] Decision Tree Classifier training .....\n",
            "[STATUS] Done Decision Tree Classifier\n",
            "[STATUS] Random Forest Classifier traning .....\n",
            "[STATUS] Done Random Forest Classifier \n",
            "[STATUS] GaussianNB training....\n",
            "[STATUS] Done GaussianNB \n",
            "[STATUS] SVC traning \n",
            "[STATUS] Done SVC\n",
            "[STATUS] DONE ALL MODEL\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-SK2Ac49TDDg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "a58b42ca-bf5c-403b-a563-af04edccaa40"
      },
      "source": [
        "x_train.shape\n"
      ],
      "execution_count": 202,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(14418, 900)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 202
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lduyDOl4NGwa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Save model\n",
        "pickle.dump(model_HOG, open('/content/drive/My Drive/Project_ML/Models/Model_HOG.pkl','wb'))"
      ],
      "execution_count": 207,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1d9-N7hINdJ1",
        "colab_type": "text"
      },
      "source": [
        "#### **Load model và predict**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YtzaPWCtNudB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "e979b345-a14a-4b89-d4df-6ab5d7747256"
      },
      "source": [
        "# Load model\n",
        "model_HOG = pickle.load(open('/content/drive/My Drive/Project_ML/Models/Model_HOG.pkl','rb'))\n",
        "#print(model_HOG)\n",
        "# Load test data \n",
        "\n",
        "with open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_data.h5','rb') as fp:\n",
        "  x_test = pickle.load(fp)\n",
        "fp.close()\n",
        "with open('/content/drive/My Drive/Project_ML/Feature/HOG/Test_labels.h5','rb') as fp:\n",
        "  label_test = pickle.load(fp)\n",
        "fp.close()\n",
        "print(x_test.shape)\n",
        "print(label_test.shape)\n",
        "scoree = [0,0,0,0,0,0,0]\n",
        "scoree[0] = model_HOG['LR'].score(x_test,label_test)\n",
        "\n",
        "scoree[1] = model_HOG['LDA'].score(x_test,label_test)\n",
        "\n",
        "scoree[2] = model_HOG['KNN'].score(x_test,label_test)\n",
        "\n",
        "scoree[3] = model_HOG['CART'].score(x_test,label_test)\n",
        "\n",
        "scoree[4] = model_HOG['RF'].score(x_test,label_test)\n",
        "\n",
        "scoree[5] =model_HOG['NB'].score(x_test,label_test)\n",
        "\n",
        "scoree[6] = model_HOG['SVM'].score(x_test,label_test)\n",
        "\n",
        "for i in range(7):\n",
        "  print(scoree[i])"
      ],
      "execution_count": 208,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1602, 900)\n",
            "(1602,)\n",
            "0.787765293383271\n",
            "0.8139825218476904\n",
            "0.8607990012484394\n",
            "0.5218476903870163\n",
            "0.8489388264669163\n",
            "0.653558052434457\n",
            "0.9232209737827716\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9mIvLCgyaygO",
        "colab_type": "text"
      },
      "source": [
        "## **Đánh giá model**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8-eBm9rTCsMt",
        "colab_type": "text"
      },
      "source": [
        "## **Độ đo accuracy**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rqsJ_NfaIRLF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "outputId": "b5c99817-8181-4767-87b5-4aff87c5e2cd"
      },
      "source": [
        "## Ví dụ demo\n",
        "from sklearn.metrics import classification_report\n",
        "y_true = [0, 1, 2, 2, 2]\n",
        "y_pred = [0, 0, 2, 2, 1]\n",
        "target_names = ['class 0', 'class 1', 'class 2']\n",
        "print(classification_report(y_true, y_pred, target_names=target_names))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "     class 0       0.50      1.00      0.67         1\n",
            "     class 1       0.00      0.00      0.00         1\n",
            "     class 2       1.00      0.67      0.80         3\n",
            "\n",
            "    accuracy                           0.60         5\n",
            "   macro avg       0.50      0.56      0.49         5\n",
            "weighted avg       0.70      0.60      0.61         5\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dEk5N8lsv3dp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "3cccf8d8-c5fc-45d4-f5bd-f35cf1c5e3c7"
      },
      "source": [
        "\n",
        "\n",
        "target_names = ['Apple','Avocado','Custard','Banana','Dragon Fruit','Start Fruit','Guava','Mango','Orange','Coconut','Plum','Watermelon']\n",
        "y_true = model1_1.predict(x_test)\n",
        "print(classification_report(label_test,y_true, target_names=target_names))\n",
        "\n",
        "y_true = model1_2.predict(x_test)\n",
        "print(classification_report(label_test, y_true,  target_names=target_names))\n",
        "\n",
        "y_true = model1_3.predict(x_test)\n",
        "print(classification_report(label_test, y_true,  target_names=target_names))\n",
        "\n",
        "y_true = model1_4.predict(x_test)\n",
        "print(classification_report(label_test, y_true,  target_names=target_names)) \n",
        "\n",
        "y_true = model1_5.predict(x_test)\n",
        "print(classification_report(label_test, y_true,  target_names=target_names))\n",
        "\n",
        "y_true = model1_6.predict(x_test)\n",
        "print(classification_report( label_test, y_true, target_names=target_names))\n",
        "\n",
        "y_true = model1_7.predict(x_test)\n",
        "print(classification_report(label_test, y_true,  target_names=target_names))\n"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       Apple       0.68      0.74      0.71       457\n",
            "     Avocado       0.04      0.00      0.01       416\n",
            "     Custard       0.59      0.36      0.45       348\n",
            "      Banana       0.06      0.02      0.03       330\n",
            "Dragon Fruit       0.30      0.78      0.44       307\n",
            " Start Fruit       0.49      0.70      0.58       189\n",
            "       Guava       0.11      0.07      0.08       294\n",
            "       Mango       0.26      0.01      0.03       402\n",
            "      Orange       0.39      0.62      0.48       460\n",
            "     Coconut       0.37      0.72      0.49       337\n",
            "        Plum       0.49      0.05      0.09       434\n",
            "  Watermelon       0.31      0.66      0.43       347\n",
            "\n",
            "    accuracy                           0.38      4321\n",
            "   macro avg       0.34      0.39      0.32      4321\n",
            "weighted avg       0.35      0.38      0.31      4321\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       Apple       0.59      0.77      0.67       457\n",
            "     Avocado       0.04      0.00      0.01       416\n",
            "     Custard       0.90      0.32      0.47       348\n",
            "      Banana       0.19      0.01      0.02       330\n",
            "Dragon Fruit       0.36      0.84      0.50       307\n",
            " Start Fruit       0.43      0.71      0.54       189\n",
            "       Guava       0.07      0.07      0.07       294\n",
            "       Mango       0.45      0.02      0.05       402\n",
            "      Orange       0.33      0.82      0.47       460\n",
            "     Coconut       0.47      0.70      0.57       337\n",
            "        Plum       0.62      0.02      0.04       434\n",
            "  Watermelon       0.36      0.56      0.44       347\n",
            "\n",
            "    accuracy                           0.40      4321\n",
            "   macro avg       0.40      0.40      0.32      4321\n",
            "weighted avg       0.41      0.40      0.31      4321\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       Apple       0.66      0.75      0.70       457\n",
            "     Avocado       0.00      0.00      0.00       416\n",
            "     Custard       1.00      0.18      0.31       348\n",
            "      Banana       0.00      0.00      0.00       330\n",
            "Dragon Fruit       0.23      0.84      0.36       307\n",
            " Start Fruit       0.45      0.09      0.15       189\n",
            "       Guava       0.35      0.14      0.20       294\n",
            "       Mango       0.35      0.02      0.03       402\n",
            "      Orange       0.42      0.94      0.58       460\n",
            "     Coconut       0.92      0.65      0.76       337\n",
            "        Plum       0.00      0.00      0.00       434\n",
            "  Watermelon       0.25      0.86      0.39       347\n",
            "\n",
            "    accuracy                           0.39      4321\n",
            "   macro avg       0.39      0.37      0.29      4321\n",
            "weighted avg       0.38      0.39      0.30      4321\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       Apple       0.42      0.67      0.52       457\n",
            "     Avocado       0.05      0.02      0.03       416\n",
            "     Custard       0.43      0.26      0.33       348\n",
            "      Banana       0.12      0.08      0.09       330\n",
            "Dragon Fruit       0.22      0.37      0.28       307\n",
            " Start Fruit       0.15      0.24      0.18       189\n",
            "       Guava       0.09      0.12      0.10       294\n",
            "       Mango       0.14      0.04      0.06       402\n",
            "      Orange       0.20      0.28      0.23       460\n",
            "     Coconut       0.23      0.33      0.27       337\n",
            "        Plum       0.08      0.01      0.02       434\n",
            "  Watermelon       0.23      0.33      0.27       347\n",
            "\n",
            "    accuracy                           0.23      4321\n",
            "   macro avg       0.20      0.23      0.20      4321\n",
            "weighted avg       0.20      0.23      0.20      4321\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       Apple       0.54      0.84      0.66       457\n",
            "     Avocado       0.00      0.00      0.00       416\n",
            "     Custard       0.91      0.41      0.56       348\n",
            "      Banana       0.03      0.00      0.01       330\n",
            "Dragon Fruit       0.22      0.85      0.35       307\n",
            " Start Fruit       0.51      0.44      0.48       189\n",
            "       Guava       0.07      0.04      0.05       294\n",
            "       Mango       0.33      0.00      0.00       402\n",
            "      Orange       0.47      0.55      0.51       460\n",
            "     Coconut       0.34      0.73      0.46       337\n",
            "        Plum       0.00      0.00      0.00       434\n",
            "  Watermelon       0.31      0.53      0.39       347\n",
            "\n",
            "    accuracy                           0.36      4321\n",
            "   macro avg       0.31      0.37      0.29      4321\n",
            "weighted avg       0.31      0.36      0.29      4321\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       Apple       0.46      0.80      0.59       457\n",
            "     Avocado       0.00      0.00      0.00       416\n",
            "     Custard       0.76      0.57      0.65       348\n",
            "      Banana       0.03      0.02      0.02       330\n",
            "Dragon Fruit       0.19      0.62      0.29       307\n",
            " Start Fruit       0.32      0.89      0.47       189\n",
            "       Guava       0.11      0.16      0.13       294\n",
            "       Mango       0.05      0.01      0.01       402\n",
            "      Orange       0.04      0.01      0.01       460\n",
            "     Coconut       0.48      0.49      0.49       337\n",
            "        Plum       0.45      0.02      0.04       434\n",
            "  Watermelon       0.26      0.42      0.32       347\n",
            "\n",
            "    accuracy                           0.30      4321\n",
            "   macro avg       0.26      0.33      0.25      4321\n",
            "weighted avg       0.26      0.30      0.24      4321\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       Apple       0.75      0.82      0.78       457\n",
            "     Avocado       0.00      0.00      0.00       416\n",
            "     Custard       0.84      0.62      0.71       348\n",
            "      Banana       0.00      0.00      0.00       330\n",
            "Dragon Fruit       0.39      0.64      0.48       307\n",
            " Start Fruit       0.47      0.92      0.62       189\n",
            "       Guava       0.24      0.30      0.27       294\n",
            "       Mango       0.22      0.01      0.02       402\n",
            "      Orange       0.49      0.87      0.63       460\n",
            "     Coconut       0.50      0.91      0.65       337\n",
            "        Plum       1.00      0.01      0.03       434\n",
            "  Watermelon       0.33      0.78      0.46       347\n",
            "\n",
            "    accuracy                           0.47      4321\n",
            "   macro avg       0.44      0.49      0.39      4321\n",
            "weighted avg       0.45      0.47      0.38      4321\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pNXGUzULY-UW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "e14570bc-f776-409c-a6b8-2808f543d809"
      },
      "source": [
        "print(model1_1.predict([x_test[0],x_test[1]]))\n",
        "print(label_test[0],label_test[1])"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[3 0]\n",
            "0 0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3MOItkZqCW-D",
        "colab_type": "text"
      },
      "source": [
        "### **Độ đo Recall, Precision, F1**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_LObvxPnCldF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "### **Độ đo "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vqN1WP19CWjj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GCQ5ruweah-X",
        "colab_type": "text"
      },
      "source": [
        "## **Lưu model**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oyIkOeWYamQn",
        "colab_type": "text"
      },
      "source": [
        "## **Load model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HtfL5eCLaRAQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-t_2yijX5hJH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 229
        },
        "outputId": "578fb37d-2fad-48ca-f634-1a446c60a121"
      },
      "source": [
        "with open('/content/drive/My Drive/Project_ML/Models/Scoring.txt','rb') as fp:\n",
        "  result = pickle.load(fp)\n",
        "print(result)\n",
        "fig = pyplot.figure()\n",
        "fig.suptitle('Machine Learning algorithm comparison')\n",
        "ax = fig.add_subplot(111)\n",
        "pyplot.boxplot(results)\n",
        "ax.set_xticklabels(names)\n",
        "pyplot.show()"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-688aa93ed563>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/My Drive/Project_ML/Models/Scoring.txt'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msuptitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Machine Learning algorithm comparison'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'pickle' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "stuT7PJCT4_Q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sX5k19I7S-GD",
        "colab_type": "text"
      },
      "source": [
        "# **Xây dựng model với Deeplearning**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2Cio9eMpjmLQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Processing training data\n",
        "# -> appending images in a list 'train_images'\n",
        "# -> appending labels in a list 'train_labels'\n",
        "\n",
        "train_images = []       \n",
        "train_labels = []\n",
        "shape = (200,200) #Quy định kích thước  \n",
        "train_path = '/content/drive/My Drive/Project_ML/Dataset/Train_data'\n",
        "\n",
        "for folder_name in os.listdir(train_path):\n",
        "  #print(filename)\n",
        "  fruit_path = os.path.join(train_path,folder_name)\n",
        "  for file_name in os.listdir(fruit_path):\n",
        "\n",
        "    img = cv2.imread(os.path.join(fruit_path,file_name)) \n",
        "        \n",
        "    # Spliting file names and storing the labels for image in list\n",
        "    train_labels.append(folder_name)\n",
        "        \n",
        "    # Resize all images to a specific shape\n",
        "    img = cv2.resize(img,shape)\n",
        "        \n",
        "    train_images.append(img)\n",
        "  print('[STATUS] folder {f} done'.format(f = folder_name))\n",
        "print('[STATUS] read image ')\n",
        "print('[STATUS] start save array image ')\n",
        "\n",
        "# Converting labels into One Hot encoded sparse matrix\n",
        "train_labels = pd.get_dummies(train_labels).values\n",
        "\n",
        "# Converting train_images to array\n",
        "train_images = np.array(train_images)\n",
        "\n",
        "\n",
        "print('Size tran images array: ',train_images.size)\n",
        "print('Size train label : ', train_labels.size)\n",
        "# Splitting Training data into train and validation dataset x-data, y-label\n",
        "x_train,x_val,y_train,y_val = train_test_split(train_images,train_labels,random_state=1)\n",
        "print('Size of x_train: {a} x_val: {b} y_train: {c} y_test: {d}'.format(a = x_train.size, b = x_val.size, c = y_train.size, d = y_val.sizee))\n",
        "Deep_model_path = '/content/drive/My Drive/Project_ML/Models/Model_with_deeplearning'\n",
        "with open( Deep_model_path + '/x_train.txt', 'wb') as fb:\n",
        "  pickle.dump(x_train,fb)\n",
        "fb.close()\n",
        "with open( Deep_model_path + '/x_val.txt', 'wb') as fb:\n",
        "  pickle.dump(x_val,fb)\n",
        "fb.close()\n",
        "with open( Deep_model_path + '/y_train.txt', 'wb') as fb:\n",
        "  pickle.dump(y_train,fb)\n",
        "fb.close()\n",
        "with open( Deep_model_path + '/y_val.txt', 'wb') as fb:\n",
        "  pickle.dump(y_val,fb)\n",
        "fb.close()\n",
        "print('[STATUS] saved array image :v :v :v')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K3Pqn8erT9Yf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d5042816-75c0-4d00-cb61-879bd45cef06"
      },
      "source": [
        "a = [[[1,2],[3,4]],[[4,5],[6,7]]]\n",
        "print(len(a))"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EFmFJdlODM9n",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "36af1bf9-b3d0-4e17-bbee-eb520b879da0"
      },
      "source": [
        "print( x_train.size,x_val.size, y_train.size, y_val.size)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1052880000 351000000 105288 35100\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cZIZ5W6ybmta",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "52805bf1-dadf-4dad-c69c-eb1ddc3899a1"
      },
      "source": [
        "a = [[[1],[2]],[[4],[5]]]\n",
        "\n",
        "with open( \"/content/drive/My Drive/Project_ML/Models\"+ '/Thunghiem.txt', 'wb') as fb:\n",
        "  pickle.dump(a,fb)\n",
        "fb.close()\n",
        "\n",
        "with open( \"/content/drive/My Drive/Project_ML/Models\"+ '/Thunghiem.txt', 'rb') as fb:\n",
        "  b = pickle.load(fb)\n",
        "print(b)\n"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[[1], [2]], [[4], [5]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WmpfsCxfZH07",
        "colab_type": "text"
      },
      "source": [
        "## **Khởi tạo model deep**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ss6DR4qancdV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Creating a Sequential model\n",
        "model= Sequential()\n",
        "model.add(Conv2D(kernel_size=(3,3), filters=32, activation='sigmoid', input_shape=(200,200,3,)))\n",
        "model.add(Conv2D(filters = 30,kernel_size = (3,3),activation='sigmoid'))\n",
        "model.add(MaxPool2D(2,2))\n",
        "model.add(Conv2D(filters=30,kernel_size = (3,3),activation='sigmoid'))\n",
        "model.add(MaxPool2D(2,2))\n",
        "model.add(Conv2D(filters=30,kernel_size = (3,3),activation='sigmoid'))\n",
        "\n",
        "model.add(Flatten())\n",
        "\n",
        "model.add(Dense(20,activation='relu'))\n",
        "model.add(Dense(15,activation='relu'))\n",
        "model.add(Dense(12,activation = 'softmax'))\n",
        "    \n",
        "model.compile(\n",
        "              loss='categorical_crossentropy', \n",
        "              metrics=['acc'],\n",
        "              optimizer='adam'\n",
        "             )\n",
        "\n",
        "# Hàm mất mát giống hàm cross entropy"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lc6JTkVVne4G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "88794ec1-a3e5-44f5-94fb-a73879c3b606"
      },
      "source": [
        "# Model Summary\n",
        "model.summary()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_5 (Conv2D)            (None, 198, 198, 32)      896       \n",
            "_________________________________________________________________\n",
            "conv2d_6 (Conv2D)            (None, 196, 196, 30)      8670      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 98, 98, 30)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_7 (Conv2D)            (None, 96, 96, 30)        8130      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_4 (MaxPooling2 (None, 48, 48, 30)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_8 (Conv2D)            (None, 46, 46, 30)        8130      \n",
            "_________________________________________________________________\n",
            "flatten_2 (Flatten)          (None, 63480)             0         \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 20)                1269620   \n",
            "_________________________________________________________________\n",
            "dense_5 (Dense)              (None, 15)                315       \n",
            "_________________________________________________________________\n",
            "dense_6 (Dense)              (None, 12)                192       \n",
            "=================================================================\n",
            "Total params: 1,295,953\n",
            "Trainable params: 1,295,953\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sFB6adHNZOiU",
        "colab_type": "text"
      },
      "source": [
        "## **Load dữ liệu**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P1dN-VZdLfnU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "bb777c40-ce4a-445a-879e-ee5be61f0c43"
      },
      "source": [
        "\n",
        "Deep_model_path = '/content/drive/My Drive/Project_ML/Models/Model_with_deeplearning'\n",
        "with open( Deep_model_path + '/y_train.txt', 'rb') as fb:\n",
        "  y_train = pickle.load(fb)\n",
        "  fb.close()\n",
        "with open( Deep_model_path + '/y_val.txt', 'rb') as fb:\n",
        "  y_val = pickle.load(fb)\n",
        "  fb.close()\n",
        "with open( Deep_model_path + '/x_val.txt', 'rb') as fb:\n",
        "  x_val = pickle.load(fb)\n",
        "  fb.close()\n",
        "with open( Deep_model_path + '/x_train.txt', 'rb') as fb:\n",
        "  x_train = pickle.load(fb)\n",
        "  fb.close()\n",
        "print(x_train.shape)\n",
        "print(x_val.shape)\n",
        "print(y_train.shape)\n",
        "print(y_val.shape )\n",
        "print(y_train)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(8774, 200, 200, 3)\n",
            "(2925, 200, 200, 3)\n",
            "(8774, 12)\n",
            "(2925, 12)\n",
            "[[0 0 0 ... 0 1 0]\n",
            " [0 0 0 ... 0 0 0]\n",
            " [0 0 0 ... 0 1 0]\n",
            " ...\n",
            " [1 0 0 ... 0 0 0]\n",
            " [0 0 0 ... 1 0 0]\n",
            " [1 0 0 ... 0 0 0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0ttIrMWuOMKM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "52091bc1-a3b4-45d4-d9b3-914fb679ca1c"
      },
      "source": [
        "A = [1,2,3,4,5]\n",
        "B = [1,0,1,0,1]\n",
        "\n",
        "a,b,c,d = train_test_split(A,B,random_state=1)\n",
        "print(a,b,c,d)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[5, 1, 4] [3, 2] [1, 1, 0] [1, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lfBZlLdeZTIr",
        "colab_type": "text"
      },
      "source": [
        "## **Train model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rf9B0htlnhmO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 605
        },
        "outputId": "328f5f3c-560d-45dd-9fbc-3859df247d10"
      },
      "source": [
        "# Training the model\n",
        "history = model.fit(x_train,y_train,epochs=50,batch_size=50,validation_data=(x_val,y_val)) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 8774 samples, validate on 2925 samples\n",
            "Epoch 1/50\n",
            "8774/8774 [==============================] - 1113s 127ms/step - loss: 2.5026 - acc: 0.1080 - val_loss: 2.4707 - val_acc: 0.1135\n",
            "Epoch 2/50\n",
            "8774/8774 [==============================] - 1108s 126ms/step - loss: 2.4652 - acc: 0.1101 - val_loss: 2.4624 - val_acc: 0.1135\n",
            "Epoch 3/50\n",
            "8774/8774 [==============================] - 1108s 126ms/step - loss: 2.4583 - acc: 0.1153 - val_loss: 2.4583 - val_acc: 0.1135\n",
            "Epoch 4/50\n",
            "8774/8774 [==============================] - 1101s 126ms/step - loss: 2.4551 - acc: 0.1153 - val_loss: 2.4565 - val_acc: 0.1135\n",
            "Epoch 5/50\n",
            "8774/8774 [==============================] - 1095s 125ms/step - loss: 2.4538 - acc: 0.1153 - val_loss: 2.4555 - val_acc: 0.1135\n",
            "Epoch 6/50\n",
            "8774/8774 [==============================] - 1088s 124ms/step - loss: 2.4531 - acc: 0.1153 - val_loss: 2.4552 - val_acc: 0.1135\n",
            "Epoch 7/50\n",
            "8774/8774 [==============================] - 1090s 124ms/step - loss: 2.4528 - acc: 0.1153 - val_loss: 2.4550 - val_acc: 0.1135\n",
            "Epoch 8/50\n",
            "8774/8774 [==============================] - 1090s 124ms/step - loss: 2.4527 - acc: 0.1153 - val_loss: 2.4548 - val_acc: 0.1135\n",
            "Epoch 9/50\n",
            "8774/8774 [==============================] - 1092s 124ms/step - loss: 2.4526 - acc: 0.1153 - val_loss: 2.4546 - val_acc: 0.1135\n",
            "Epoch 10/50\n",
            "8774/8774 [==============================] - 1096s 125ms/step - loss: 2.4526 - acc: 0.1153 - val_loss: 2.4544 - val_acc: 0.1135\n",
            "Epoch 11/50\n",
            "8774/8774 [==============================] - 1093s 125ms/step - loss: 2.4526 - acc: 0.1153 - val_loss: 2.4544 - val_acc: 0.1135\n",
            "Epoch 12/50\n",
            "8774/8774 [==============================] - 1098s 125ms/step - loss: 2.4525 - acc: 0.1153 - val_loss: 2.4543 - val_acc: 0.1135\n",
            "Epoch 13/50\n",
            "8774/8774 [==============================] - 1103s 126ms/step - loss: 2.4526 - acc: 0.1153 - val_loss: 2.4542 - val_acc: 0.1135\n",
            "Epoch 14/50\n",
            "8774/8774 [==============================] - 1105s 126ms/step - loss: 2.4526 - acc: 0.1153 - val_loss: 2.4541 - val_acc: 0.1135\n",
            "Epoch 15/50\n",
            "8774/8774 [==============================] - 1103s 126ms/step - loss: 2.4525 - acc: 0.1153 - val_loss: 2.4542 - val_acc: 0.1135\n",
            "Epoch 16/50\n",
            "8774/8774 [==============================] - 1095s 125ms/step - loss: 2.4526 - acc: 0.1153 - val_loss: 2.4541 - val_acc: 0.1135\n",
            "Epoch 17/50\n",
            "5900/8774 [===================>..........] - ETA: 5:27 - loss: 2.4539 - acc: 0.1136"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pkyInOY4nnPu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "119239a1-fe5e-459b-abac-4cefb2b031f0"
      },
      "source": [
        "# summarize history for accuracy\n",
        "plt.plot(history.history['acc'])\n",
        "plt.plot(history.history['val_acc'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z-WXCturno_X",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "790d7ab4-bc3e-43ba-b3c2-5124aabe5d36"
      },
      "source": [
        "# summarize history for loss\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fuLPYbOFnqKQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "3ac87e69-3a46-4fef-b433-b47844440d1f"
      },
      "source": [
        "# Evaluating model on validation data\n",
        "evaluate = model.evaluate(x_val,y_val)\n",
        "print(evaluate)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "60/60 [==============================] - 0s 8ms/step\n",
            "[1.2702135801315309, 0.8166666626930237]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j_tl3_EMns_7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "f62ca6c9-39bc-4f27-a3a2-a1522e904009"
      },
      "source": [
        "# Testing predictions and the actual label\n",
        "checkImage = test_images[2:3]\n",
        "checklabel = test_labels[2:3]\n",
        "\n",
        "predict = model.predict(np.array(checkImage))\n",
        "\n",
        "output = { 0:'apple',1:'banana',2:'mixed',3:'orange'}\n",
        "\n",
        "#print(test_images[0:1])\n",
        "#print(test_labels[0:1])\n",
        "print(\"Actual :- \",checklabel)\n",
        "print(\"Predicted :- \",output[np.argmax(predict)])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Actual :-  ['apple']\n",
            "Predicted :-  apple\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4W83XLlUojeZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "b4cab958-4b38-4372-826b-d1582d9eaaf2"
      },
      "source": [
        "Test_images = []\n",
        "Test_labels = []\n",
        "shape = (200,200)\n",
        "Test_path = '/content/drive/My Drive/Data/Fruit/Test_data'\n",
        "\n",
        "for filename in os.listdir(Test_path):\n",
        "  print(filename)\n",
        "  if filename.split('.')[1] == 'jpg':\n",
        "    img = cv2.imread(os.path.join(Test_path,filename))\n",
        "    #print(img)    \n",
        "    # Spliting file names and storing the labels for image in list\n",
        "    #Test_labels.append(filename.split('_')[0])\n",
        "        \n",
        "    # Resize all images to a specific shape\n",
        "    img = cv2.resize(img,shape)\n",
        "    #print(img) \n",
        "    Test_images.append(img)\n",
        "#print(test_images[0])\n",
        "Test_labels  = [0,0,1,1,1,1,1,1,1,1,1]       \n",
        "# Converting test_images to array\n",
        "Test_images = np.array(Test_images)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "apple_01 (1).jpg\n",
            "banana_01.jpg\n",
            "apple_01.jpg\n",
            "banana_02.jpg\n",
            "banana_03.jpg\n",
            "banana_04.jpg\n",
            "banana_05.jpg\n",
            "banana_06.jpg\n",
            "banana_07.jpg\n",
            "banana_08.jpg\n",
            "banana_09.jpg\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bAZJPWf9qmmv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "c1268a83-5e5f-42a5-eb78-135244801201"
      },
      "source": [
        "Check_image = Test_images[2:3]\n",
        "Check_label = Test_labels[2:3]\n",
        "\n",
        "predict = model.predict(np.array(Check_image))\n",
        "\n",
        "output = { 0:'apple',1:'banana',2:'mixed',3:'orange'}\n",
        "\n",
        "print(predict)\n",
        "print(\"Actual :- \",Check_label)\n",
        "print(\"Predicted :- \",output[np.argmax(predict)])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1.9711511e-02 9.7973287e-01 8.8944532e-09 5.5556954e-04]]\n",
            "Actual :-  [1]\n",
            "Predicted :-  banana\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GWRyiMmBLld1",
        "colab_type": "text"
      },
      "source": [
        "# **Xây dựng hàm predict**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yhDG_DnDZ9Gg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def Prediction(model_path, img_path):\n",
        "  label = ['Apple','Avocado','Banana','Coconut' ,'Custard','Dragon Fruit','Guava','Mango','Orange','Plum','Start Fruit','Watermelon']\n",
        "  model = pickle.load(open(model_path,'rb'))\n",
        "  model_predict = model['RF']\n",
        "  # Rút trích đặc trưng với \n",
        "  img = cv2.imread(img_path)\n",
        "  image = cv2.resize(img, (64,64))\n",
        "  ####################################\n",
        "  # Global Feature extraction\n",
        "  ####################################\n",
        "  fv_hu_moments = fd_hu_moments(image)\n",
        "  fv_haralick   = fd_haralick(image)\n",
        "  fv_histogram  = fd_histogram(image)\n",
        "\n",
        "  ###################################\n",
        "  # Concatenate global features\n",
        "  ###################################\n",
        "  global_feature = np.hstack([fv_histogram, fv_haralick, fv_hu_moments])\n",
        "\n",
        "  #print(global_feature)\n",
        "  # predict label of test image\n",
        "  prediction = model_predict.predict([global_feature] )[0]\n",
        "\n",
        "  # show predicted label on image\n",
        "  cv2.putText(img, label[prediction], (100,100), cv2.FONT_HERSHEY_SIMPLEX, 10.0, (0,255,255), 50)\n",
        "  print(label[prediction])\n",
        "  # display the output image\n",
        "  plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n",
        "  plt.show()"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RIbNX6n3W5RV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "21c190a0-e576-4e97-8883-c8100004a246"
      },
      "source": [
        "path_model = '/content/drive/My Drive/Project_ML/Models/Model_3d.pkl'\n",
        "path_img = \"/content/drive/My Drive/Project_ML/Dataset/Train_data/Guava/Guava0003.jpg\"\n",
        "\n",
        "Prediction(path_model,path_img)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Guava\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}